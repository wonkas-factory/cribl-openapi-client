/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.cribl.openapi.dto.SavedJobCollectionCollector;
import com.cribl.openapi.dto.SavedJobCollectionExecutor;
import com.cribl.openapi.dto.SavedJobCollectionInput;
import com.cribl.openapi.dto.SavedJobCollectionRun;
import com.cribl.openapi.dto.Schedule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RunnableJobCollection
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class RunnableJobCollection implements OneOfRunnableJob {
  @SerializedName("id")
  private String id = null;

  /**
   * Job type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COLLECTION("collection"),
    EXECUTOR("executor");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("ttl")
  private String ttl = "4h";

  @SerializedName("removeFields")
  private List<String> removeFields = null;

  @SerializedName("resumeOnBoot")
  private Boolean resumeOnBoot = false;

  @SerializedName("schedule")
  private Schedule schedule = null;

  @SerializedName("collector")
  private SavedJobCollectionCollector collector = null;

  @SerializedName("input")
  private SavedJobCollectionInput input = null;

  @SerializedName("executor")
  private SavedJobCollectionExecutor executor = null;

  @SerializedName("run")
  private SavedJobCollectionRun run = null;

  public RunnableJobCollection id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique ID for this Job.
   * @return id
  **/
  @Schema(description = "Unique ID for this Job.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RunnableJobCollection type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Job type.
   * @return type
  **/
  @Schema(description = "Job type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public RunnableJobCollection ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Time to keep the job&#x27;s artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
   * @return ttl
  **/
  @Schema(description = "Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.")
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }

  public RunnableJobCollection removeFields(List<String> removeFields) {
    this.removeFields = removeFields;
    return this;
  }

  public RunnableJobCollection addRemoveFieldsItem(String removeFieldsItem) {
    if (this.removeFields == null) {
      this.removeFields = new ArrayList<>();
    }
    this.removeFields.add(removeFieldsItem);
    return this;
  }

   /**
   * List of fields to remove from Discover results. Wildcards (e.g.: aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.
   * @return removeFields
  **/
  @Schema(description = "List of fields to remove from Discover results. Wildcards (e.g.: aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.")
  public List<String> getRemoveFields() {
    return removeFields;
  }

  public void setRemoveFields(List<String> removeFields) {
    this.removeFields = removeFields;
  }

  public RunnableJobCollection resumeOnBoot(Boolean resumeOnBoot) {
    this.resumeOnBoot = resumeOnBoot;
    return this;
  }

   /**
   * Resumes the ad hoc job if a failure condition causes LogStream to restart during job execution.
   * @return resumeOnBoot
  **/
  @Schema(description = "Resumes the ad hoc job if a failure condition causes LogStream to restart during job execution.")
  public Boolean isResumeOnBoot() {
    return resumeOnBoot;
  }

  public void setResumeOnBoot(Boolean resumeOnBoot) {
    this.resumeOnBoot = resumeOnBoot;
  }

  public RunnableJobCollection schedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @Schema(description = "")
  public Schedule getSchedule() {
    return schedule;
  }

  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }

  public RunnableJobCollection collector(SavedJobCollectionCollector collector) {
    this.collector = collector;
    return this;
  }

   /**
   * Get collector
   * @return collector
  **/
  @Schema(description = "")
  public SavedJobCollectionCollector getCollector() {
    return collector;
  }

  public void setCollector(SavedJobCollectionCollector collector) {
    this.collector = collector;
  }

  public RunnableJobCollection input(SavedJobCollectionInput input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @Schema(description = "")
  public SavedJobCollectionInput getInput() {
    return input;
  }

  public void setInput(SavedJobCollectionInput input) {
    this.input = input;
  }

  public RunnableJobCollection executor(SavedJobCollectionExecutor executor) {
    this.executor = executor;
    return this;
  }

   /**
   * Get executor
   * @return executor
  **/
  @Schema(required = true, description = "")
  public SavedJobCollectionExecutor getExecutor() {
    return executor;
  }

  public void setExecutor(SavedJobCollectionExecutor executor) {
    this.executor = executor;
  }

  public RunnableJobCollection run(SavedJobCollectionRun run) {
    this.run = run;
    return this;
  }

   /**
   * Get run
   * @return run
  **/
  @Schema(required = true, description = "")
  public SavedJobCollectionRun getRun() {
    return run;
  }

  public void setRun(SavedJobCollectionRun run) {
    this.run = run;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnableJobCollection runnableJobCollection = (RunnableJobCollection) o;
    return Objects.equals(this.id, runnableJobCollection.id) &&
        Objects.equals(this.type, runnableJobCollection.type) &&
        Objects.equals(this.ttl, runnableJobCollection.ttl) &&
        Objects.equals(this.removeFields, runnableJobCollection.removeFields) &&
        Objects.equals(this.resumeOnBoot, runnableJobCollection.resumeOnBoot) &&
        Objects.equals(this.schedule, runnableJobCollection.schedule) &&
        Objects.equals(this.collector, runnableJobCollection.collector) &&
        Objects.equals(this.input, runnableJobCollection.input) &&
        Objects.equals(this.executor, runnableJobCollection.executor) &&
        Objects.equals(this.run, runnableJobCollection.run);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, ttl, removeFields, resumeOnBoot, schedule, collector, input, executor, run);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnableJobCollection {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    removeFields: ").append(toIndentedString(removeFields)).append("\n");
    sb.append("    resumeOnBoot: ").append(toIndentedString(resumeOnBoot)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    collector: ").append(toIndentedString(collector)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    executor: ").append(toIndentedString(executor)).append("\n");
    sb.append("    run: ").append(toIndentedString(run)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
