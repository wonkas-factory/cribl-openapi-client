/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * InputStatusAzureBlobMetrics
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class InputStatusAzureBlobMetrics implements OneOfInputStatusStatusMetrics {
  @SerializedName("persistentQueueSize")
  private BigDecimal persistentQueueSize = null;

  @SerializedName("received")
  private BigDecimal received = null;

  @SerializedName("numErrors")
  private BigDecimal numErrors = null;

  @SerializedName("lag")
  private BigDecimal lag = null;

  @SerializedName("numIgnored")
  private BigDecimal numIgnored = null;

  @SerializedName("breakerReceived")
  private BigDecimal breakerReceived = null;

  @SerializedName("broken")
  private BigDecimal broken = null;

  public InputStatusAzureBlobMetrics persistentQueueSize(BigDecimal persistentQueueSize) {
    this.persistentQueueSize = persistentQueueSize;
    return this;
  }

   /**
   * The number of bytes stored in the persistent queue
   * @return persistentQueueSize
  **/
  @Schema(description = "The number of bytes stored in the persistent queue")
  public BigDecimal getPersistentQueueSize() {
    return persistentQueueSize;
  }

  public void setPersistentQueueSize(BigDecimal persistentQueueSize) {
    this.persistentQueueSize = persistentQueueSize;
  }

  public InputStatusAzureBlobMetrics received(BigDecimal received) {
    this.received = received;
    return this;
  }

   /**
   * Number of messages received
   * @return received
  **/
  @Schema(description = "Number of messages received")
  public BigDecimal getReceived() {
    return received;
  }

  public void setReceived(BigDecimal received) {
    this.received = received;
  }

  public InputStatusAzureBlobMetrics numErrors(BigDecimal numErrors) {
    this.numErrors = numErrors;
    return this;
  }

   /**
   * Number of errors
   * @return numErrors
  **/
  @Schema(description = "Number of errors")
  public BigDecimal getNumErrors() {
    return numErrors;
  }

  public void setNumErrors(BigDecimal numErrors) {
    this.numErrors = numErrors;
  }

  public InputStatusAzureBlobMetrics lag(BigDecimal lag) {
    this.lag = lag;
    return this;
  }

   /**
   * Minimum time messages are at rest in storage queue.
   * @return lag
  **/
  @Schema(description = "Minimum time messages are at rest in storage queue.")
  public BigDecimal getLag() {
    return lag;
  }

  public void setLag(BigDecimal lag) {
    this.lag = lag;
  }

  public InputStatusAzureBlobMetrics numIgnored(BigDecimal numIgnored) {
    this.numIgnored = numIgnored;
    return this;
  }

   /**
   * Number events received but ignored because did not match file filter or type not supported (e.g., blob deleted)
   * @return numIgnored
  **/
  @Schema(description = "Number events received but ignored because did not match file filter or type not supported (e.g., blob deleted)")
  public BigDecimal getNumIgnored() {
    return numIgnored;
  }

  public void setNumIgnored(BigDecimal numIgnored) {
    this.numIgnored = numIgnored;
  }

  public InputStatusAzureBlobMetrics breakerReceived(BigDecimal breakerReceived) {
    this.breakerReceived = breakerReceived;
    return this;
  }

   /**
   * Number of events received by event breaking
   * @return breakerReceived
  **/
  @Schema(description = "Number of events received by event breaking")
  public BigDecimal getBreakerReceived() {
    return breakerReceived;
  }

  public void setBreakerReceived(BigDecimal breakerReceived) {
    this.breakerReceived = breakerReceived;
  }

  public InputStatusAzureBlobMetrics broken(BigDecimal broken) {
    this.broken = broken;
    return this;
  }

   /**
   * Number events generated by event breaking
   * @return broken
  **/
  @Schema(description = "Number events generated by event breaking")
  public BigDecimal getBroken() {
    return broken;
  }

  public void setBroken(BigDecimal broken) {
    this.broken = broken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputStatusAzureBlobMetrics inputStatusAzureBlobMetrics = (InputStatusAzureBlobMetrics) o;
    return Objects.equals(this.persistentQueueSize, inputStatusAzureBlobMetrics.persistentQueueSize) &&
        Objects.equals(this.received, inputStatusAzureBlobMetrics.received) &&
        Objects.equals(this.numErrors, inputStatusAzureBlobMetrics.numErrors) &&
        Objects.equals(this.lag, inputStatusAzureBlobMetrics.lag) &&
        Objects.equals(this.numIgnored, inputStatusAzureBlobMetrics.numIgnored) &&
        Objects.equals(this.breakerReceived, inputStatusAzureBlobMetrics.breakerReceived) &&
        Objects.equals(this.broken, inputStatusAzureBlobMetrics.broken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(persistentQueueSize, received, numErrors, lag, numIgnored, breakerReceived, broken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputStatusAzureBlobMetrics {\n");
    
    sb.append("    persistentQueueSize: ").append(toIndentedString(persistentQueueSize)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    numErrors: ").append(toIndentedString(numErrors)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    numIgnored: ").append(toIndentedString(numIgnored)).append("\n");
    sb.append("    breakerReceived: ").append(toIndentedString(breakerReceived)).append("\n");
    sb.append("    broken: ").append(toIndentedString(broken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
