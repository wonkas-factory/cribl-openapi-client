/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SystemSettingsGit
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class SystemSettingsGit {
  @SerializedName("autoAction")
  private String autoAction = null;

  @SerializedName("autoActionMessage")
  private String autoActionMessage = null;

  @SerializedName("autoActionSchedule")
  private String autoActionSchedule = null;

  @SerializedName("commitDeploySingleAction")
  private Boolean commitDeploySingleAction = null;

  @SerializedName("defaultCommitMessage")
  private String defaultCommitMessage = null;

  @SerializedName("remote")
  private String remote = null;

  @SerializedName("sshKey")
  private String sshKey = null;

  public SystemSettingsGit autoAction(String autoAction) {
    this.autoAction = autoAction;
    return this;
  }

   /**
   * Get autoAction
   * @return autoAction
  **/
  @Schema(description = "")
  public String getAutoAction() {
    return autoAction;
  }

  public void setAutoAction(String autoAction) {
    this.autoAction = autoAction;
  }

  public SystemSettingsGit autoActionMessage(String autoActionMessage) {
    this.autoActionMessage = autoActionMessage;
    return this;
  }

   /**
   * Get autoActionMessage
   * @return autoActionMessage
  **/
  @Schema(description = "")
  public String getAutoActionMessage() {
    return autoActionMessage;
  }

  public void setAutoActionMessage(String autoActionMessage) {
    this.autoActionMessage = autoActionMessage;
  }

  public SystemSettingsGit autoActionSchedule(String autoActionSchedule) {
    this.autoActionSchedule = autoActionSchedule;
    return this;
  }

   /**
   * Get autoActionSchedule
   * @return autoActionSchedule
  **/
  @Schema(description = "")
  public String getAutoActionSchedule() {
    return autoActionSchedule;
  }

  public void setAutoActionSchedule(String autoActionSchedule) {
    this.autoActionSchedule = autoActionSchedule;
  }

  public SystemSettingsGit commitDeploySingleAction(Boolean commitDeploySingleAction) {
    this.commitDeploySingleAction = commitDeploySingleAction;
    return this;
  }

   /**
   * Get commitDeploySingleAction
   * @return commitDeploySingleAction
  **/
  @Schema(description = "")
  public Boolean isCommitDeploySingleAction() {
    return commitDeploySingleAction;
  }

  public void setCommitDeploySingleAction(Boolean commitDeploySingleAction) {
    this.commitDeploySingleAction = commitDeploySingleAction;
  }

  public SystemSettingsGit defaultCommitMessage(String defaultCommitMessage) {
    this.defaultCommitMessage = defaultCommitMessage;
    return this;
  }

   /**
   * Get defaultCommitMessage
   * @return defaultCommitMessage
  **/
  @Schema(description = "")
  public String getDefaultCommitMessage() {
    return defaultCommitMessage;
  }

  public void setDefaultCommitMessage(String defaultCommitMessage) {
    this.defaultCommitMessage = defaultCommitMessage;
  }

  public SystemSettingsGit remote(String remote) {
    this.remote = remote;
    return this;
  }

   /**
   * Get remote
   * @return remote
  **/
  @Schema(description = "")
  public String getRemote() {
    return remote;
  }

  public void setRemote(String remote) {
    this.remote = remote;
  }

  public SystemSettingsGit sshKey(String sshKey) {
    this.sshKey = sshKey;
    return this;
  }

   /**
   * Get sshKey
   * @return sshKey
  **/
  @Schema(description = "")
  public String getSshKey() {
    return sshKey;
  }

  public void setSshKey(String sshKey) {
    this.sshKey = sshKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemSettingsGit systemSettingsGit = (SystemSettingsGit) o;
    return Objects.equals(this.autoAction, systemSettingsGit.autoAction) &&
        Objects.equals(this.autoActionMessage, systemSettingsGit.autoActionMessage) &&
        Objects.equals(this.autoActionSchedule, systemSettingsGit.autoActionSchedule) &&
        Objects.equals(this.commitDeploySingleAction, systemSettingsGit.commitDeploySingleAction) &&
        Objects.equals(this.defaultCommitMessage, systemSettingsGit.defaultCommitMessage) &&
        Objects.equals(this.remote, systemSettingsGit.remote) &&
        Objects.equals(this.sshKey, systemSettingsGit.sshKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoAction, autoActionMessage, autoActionSchedule, commitDeploySingleAction, defaultCommitMessage, remote, sshKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemSettingsGit {\n");
    
    sb.append("    autoAction: ").append(toIndentedString(autoAction)).append("\n");
    sb.append("    autoActionMessage: ").append(toIndentedString(autoActionMessage)).append("\n");
    sb.append("    autoActionSchedule: ").append(toIndentedString(autoActionSchedule)).append("\n");
    sb.append("    commitDeploySingleAction: ").append(toIndentedString(commitDeploySingleAction)).append("\n");
    sb.append("    defaultCommitMessage: ").append(toIndentedString(defaultCommitMessage)).append("\n");
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("    sshKey: ").append(toIndentedString(sshKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
