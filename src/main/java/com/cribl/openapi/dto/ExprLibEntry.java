/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ExprLibEntry
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class ExprLibEntry {
  @SerializedName("context")
  private Map<String, Object> context = null;

  @SerializedName("evalType")
  private String evalType = null;

  @SerializedName("expr")
  private String expr = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("pack")
  private String pack = null;

  @SerializedName("result")
  private Map<String, Object> result = null;

  @SerializedName("unprotected")
  private Boolean unprotected = null;

  public ExprLibEntry context(Map<String, Object> context) {
    this.context = context;
    return this;
  }

  public ExprLibEntry putContextItem(String key, Object contextItem) {
    if (this.context == null) {
      this.context = new HashMap<>();
    }
    this.context.put(key, contextItem);
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @Schema(description = "")
  public Map<String, Object> getContext() {
    return context;
  }

  public void setContext(Map<String, Object> context) {
    this.context = context;
  }

  public ExprLibEntry evalType(String evalType) {
    this.evalType = evalType;
    return this;
  }

   /**
   * Get evalType
   * @return evalType
  **/
  @Schema(description = "")
  public String getEvalType() {
    return evalType;
  }

  public void setEvalType(String evalType) {
    this.evalType = evalType;
  }

  public ExprLibEntry expr(String expr) {
    this.expr = expr;
    return this;
  }

   /**
   * JavaScript expression to evaluate
   * @return expr
  **/
  @Schema(description = "JavaScript expression to evaluate")
  public String getExpr() {
    return expr;
  }

  public void setExpr(String expr) {
    this.expr = expr;
  }

  public ExprLibEntry id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ExprLibEntry pack(String pack) {
    this.pack = pack;
    return this;
  }

   /**
   * Get pack
   * @return pack
  **/
  @Schema(description = "")
  public String getPack() {
    return pack;
  }

  public void setPack(String pack) {
    this.pack = pack;
  }

  public ExprLibEntry result(Map<String, Object> result) {
    this.result = result;
    return this;
  }

  public ExprLibEntry putResultItem(String key, Object resultItem) {
    if (this.result == null) {
      this.result = new HashMap<>();
    }
    this.result.put(key, resultItem);
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @Schema(description = "")
  public Map<String, Object> getResult() {
    return result;
  }

  public void setResult(Map<String, Object> result) {
    this.result = result;
  }

  public ExprLibEntry unprotected(Boolean unprotected) {
    this.unprotected = unprotected;
    return this;
  }

   /**
   * Get unprotected
   * @return unprotected
  **/
  @Schema(description = "")
  public Boolean isUnprotected() {
    return unprotected;
  }

  public void setUnprotected(Boolean unprotected) {
    this.unprotected = unprotected;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExprLibEntry exprLibEntry = (ExprLibEntry) o;
    return Objects.equals(this.context, exprLibEntry.context) &&
        Objects.equals(this.evalType, exprLibEntry.evalType) &&
        Objects.equals(this.expr, exprLibEntry.expr) &&
        Objects.equals(this.id, exprLibEntry.id) &&
        Objects.equals(this.pack, exprLibEntry.pack) &&
        Objects.equals(this.result, exprLibEntry.result) &&
        Objects.equals(this.unprotected, exprLibEntry.unprotected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, evalType, expr, id, pack, result, unprotected);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExprLibEntry {\n");
    
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    evalType: ").append(toIndentedString(evalType)).append("\n");
    sb.append("    expr: ").append(toIndentedString(expr)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pack: ").append(toIndentedString(pack)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    unprotected: ").append(toIndentedString(unprotected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
