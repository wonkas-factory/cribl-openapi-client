/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PipelineFunctionConf
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class PipelineFunctionConf {
  @SerializedName("filter")
  private String filter = "true";

  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("disabled")
  private Boolean disabled = null;

  @SerializedName("final")
  private Boolean _final = null;

  @SerializedName("conf")
  private Object conf = null;

  @SerializedName("groupId")
  private String groupId = null;

  public PipelineFunctionConf filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Filter that selects data to be fed through this function
   * @return filter
  **/
  @Schema(description = "Filter that selects data to be fed through this function")
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }

  public PipelineFunctionConf id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Function ID
   * @return id
  **/
  @Schema(required = true, description = "Function ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PipelineFunctionConf description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Simple description of this step
   * @return description
  **/
  @Schema(description = "Simple description of this step")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PipelineFunctionConf disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * If true, data will not be pushed through this function
   * @return disabled
  **/
  @Schema(description = "If true, data will not be pushed through this function")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public PipelineFunctionConf _final(Boolean _final) {
    this._final = _final;
    return this;
  }

   /**
   * If true, stops the results of this function from being passed to the downstream functions
   * @return _final
  **/
  @Schema(description = "If true, stops the results of this function from being passed to the downstream functions")
  public Boolean isFinal() {
    return _final;
  }

  public void setFinal(Boolean _final) {
    this._final = _final;
  }

  public PipelineFunctionConf conf(Object conf) {
    this.conf = conf;
    return this;
  }

   /**
   * Get conf
   * @return conf
  **/
  @Schema(required = true, description = "")
  public Object getConf() {
    return conf;
  }

  public void setConf(Object conf) {
    this.conf = conf;
  }

  public PipelineFunctionConf groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Group ID
   * @return groupId
  **/
  @Schema(description = "Group ID")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineFunctionConf pipelineFunctionConf = (PipelineFunctionConf) o;
    return Objects.equals(this.filter, pipelineFunctionConf.filter) &&
        Objects.equals(this.id, pipelineFunctionConf.id) &&
        Objects.equals(this.description, pipelineFunctionConf.description) &&
        Objects.equals(this.disabled, pipelineFunctionConf.disabled) &&
        Objects.equals(this._final, pipelineFunctionConf._final) &&
        Objects.equals(this.conf, pipelineFunctionConf.conf) &&
        Objects.equals(this.groupId, pipelineFunctionConf.groupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, id, description, disabled, _final, conf, groupId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineFunctionConf {\n");
    
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    _final: ").append(toIndentedString(_final)).append("\n");
    sb.append("    conf: ").append(toIndentedString(conf)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
