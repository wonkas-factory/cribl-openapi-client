/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * JobSettings
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class JobSettings {
  @SerializedName("concurrentJobLimit")
  private BigDecimal concurrentJobLimit = null;

  @SerializedName("concurrentScheduledJobLimit")
  private BigDecimal concurrentScheduledJobLimit = null;

  @SerializedName("concurrentSystemJobLimit")
  private BigDecimal concurrentSystemJobLimit = null;

  @SerializedName("concurrentSystemTaskLimit")
  private BigDecimal concurrentSystemTaskLimit = null;

  @SerializedName("concurrentTaskLimit")
  private BigDecimal concurrentTaskLimit = null;

  @SerializedName("finishedJobArtifactsLimit")
  private BigDecimal finishedJobArtifactsLimit = null;

  @SerializedName("finishedTaskArtifactsLimit")
  private BigDecimal finishedTaskArtifactsLimit = null;

  @SerializedName("jobArtifactsReaperPeriod")
  private String jobArtifactsReaperPeriod = null;

  @SerializedName("jobTimeout")
  private BigDecimal jobTimeout = null;

  @SerializedName("maxTaskPerc")
  private BigDecimal maxTaskPerc = null;

  @SerializedName("schedulingPolicy")
  private String schedulingPolicy = null;

  @SerializedName("taskHeartbeatPeriod")
  private BigDecimal taskHeartbeatPeriod = null;

  @SerializedName("taskManifestFlushPeriodMs")
  private BigDecimal taskManifestFlushPeriodMs = null;

  @SerializedName("taskManifestMaxBufferSize")
  private BigDecimal taskManifestMaxBufferSize = null;

  @SerializedName("taskManifestReadBufferSize")
  private BigDecimal taskManifestReadBufferSize = null;

  @SerializedName("taskPollTimeoutMs")
  private BigDecimal taskPollTimeoutMs = null;

  public JobSettings concurrentJobLimit(BigDecimal concurrentJobLimit) {
    this.concurrentJobLimit = concurrentJobLimit;
    return this;
  }

   /**
   * Get concurrentJobLimit
   * @return concurrentJobLimit
  **/
  @Schema(description = "")
  public BigDecimal getConcurrentJobLimit() {
    return concurrentJobLimit;
  }

  public void setConcurrentJobLimit(BigDecimal concurrentJobLimit) {
    this.concurrentJobLimit = concurrentJobLimit;
  }

  public JobSettings concurrentScheduledJobLimit(BigDecimal concurrentScheduledJobLimit) {
    this.concurrentScheduledJobLimit = concurrentScheduledJobLimit;
    return this;
  }

   /**
   * Get concurrentScheduledJobLimit
   * @return concurrentScheduledJobLimit
  **/
  @Schema(description = "")
  public BigDecimal getConcurrentScheduledJobLimit() {
    return concurrentScheduledJobLimit;
  }

  public void setConcurrentScheduledJobLimit(BigDecimal concurrentScheduledJobLimit) {
    this.concurrentScheduledJobLimit = concurrentScheduledJobLimit;
  }

  public JobSettings concurrentSystemJobLimit(BigDecimal concurrentSystemJobLimit) {
    this.concurrentSystemJobLimit = concurrentSystemJobLimit;
    return this;
  }

   /**
   * Get concurrentSystemJobLimit
   * @return concurrentSystemJobLimit
  **/
  @Schema(description = "")
  public BigDecimal getConcurrentSystemJobLimit() {
    return concurrentSystemJobLimit;
  }

  public void setConcurrentSystemJobLimit(BigDecimal concurrentSystemJobLimit) {
    this.concurrentSystemJobLimit = concurrentSystemJobLimit;
  }

  public JobSettings concurrentSystemTaskLimit(BigDecimal concurrentSystemTaskLimit) {
    this.concurrentSystemTaskLimit = concurrentSystemTaskLimit;
    return this;
  }

   /**
   * Get concurrentSystemTaskLimit
   * @return concurrentSystemTaskLimit
  **/
  @Schema(description = "")
  public BigDecimal getConcurrentSystemTaskLimit() {
    return concurrentSystemTaskLimit;
  }

  public void setConcurrentSystemTaskLimit(BigDecimal concurrentSystemTaskLimit) {
    this.concurrentSystemTaskLimit = concurrentSystemTaskLimit;
  }

  public JobSettings concurrentTaskLimit(BigDecimal concurrentTaskLimit) {
    this.concurrentTaskLimit = concurrentTaskLimit;
    return this;
  }

   /**
   * Get concurrentTaskLimit
   * @return concurrentTaskLimit
  **/
  @Schema(description = "")
  public BigDecimal getConcurrentTaskLimit() {
    return concurrentTaskLimit;
  }

  public void setConcurrentTaskLimit(BigDecimal concurrentTaskLimit) {
    this.concurrentTaskLimit = concurrentTaskLimit;
  }

  public JobSettings finishedJobArtifactsLimit(BigDecimal finishedJobArtifactsLimit) {
    this.finishedJobArtifactsLimit = finishedJobArtifactsLimit;
    return this;
  }

   /**
   * Get finishedJobArtifactsLimit
   * @return finishedJobArtifactsLimit
  **/
  @Schema(description = "")
  public BigDecimal getFinishedJobArtifactsLimit() {
    return finishedJobArtifactsLimit;
  }

  public void setFinishedJobArtifactsLimit(BigDecimal finishedJobArtifactsLimit) {
    this.finishedJobArtifactsLimit = finishedJobArtifactsLimit;
  }

  public JobSettings finishedTaskArtifactsLimit(BigDecimal finishedTaskArtifactsLimit) {
    this.finishedTaskArtifactsLimit = finishedTaskArtifactsLimit;
    return this;
  }

   /**
   * Get finishedTaskArtifactsLimit
   * @return finishedTaskArtifactsLimit
  **/
  @Schema(description = "")
  public BigDecimal getFinishedTaskArtifactsLimit() {
    return finishedTaskArtifactsLimit;
  }

  public void setFinishedTaskArtifactsLimit(BigDecimal finishedTaskArtifactsLimit) {
    this.finishedTaskArtifactsLimit = finishedTaskArtifactsLimit;
  }

  public JobSettings jobArtifactsReaperPeriod(String jobArtifactsReaperPeriod) {
    this.jobArtifactsReaperPeriod = jobArtifactsReaperPeriod;
    return this;
  }

   /**
   * Get jobArtifactsReaperPeriod
   * @return jobArtifactsReaperPeriod
  **/
  @Schema(description = "")
  public String getJobArtifactsReaperPeriod() {
    return jobArtifactsReaperPeriod;
  }

  public void setJobArtifactsReaperPeriod(String jobArtifactsReaperPeriod) {
    this.jobArtifactsReaperPeriod = jobArtifactsReaperPeriod;
  }

  public JobSettings jobTimeout(BigDecimal jobTimeout) {
    this.jobTimeout = jobTimeout;
    return this;
  }

   /**
   * Get jobTimeout
   * @return jobTimeout
  **/
  @Schema(description = "")
  public BigDecimal getJobTimeout() {
    return jobTimeout;
  }

  public void setJobTimeout(BigDecimal jobTimeout) {
    this.jobTimeout = jobTimeout;
  }

  public JobSettings maxTaskPerc(BigDecimal maxTaskPerc) {
    this.maxTaskPerc = maxTaskPerc;
    return this;
  }

   /**
   * Get maxTaskPerc
   * @return maxTaskPerc
  **/
  @Schema(description = "")
  public BigDecimal getMaxTaskPerc() {
    return maxTaskPerc;
  }

  public void setMaxTaskPerc(BigDecimal maxTaskPerc) {
    this.maxTaskPerc = maxTaskPerc;
  }

  public JobSettings schedulingPolicy(String schedulingPolicy) {
    this.schedulingPolicy = schedulingPolicy;
    return this;
  }

   /**
   * Get schedulingPolicy
   * @return schedulingPolicy
  **/
  @Schema(description = "")
  public String getSchedulingPolicy() {
    return schedulingPolicy;
  }

  public void setSchedulingPolicy(String schedulingPolicy) {
    this.schedulingPolicy = schedulingPolicy;
  }

  public JobSettings taskHeartbeatPeriod(BigDecimal taskHeartbeatPeriod) {
    this.taskHeartbeatPeriod = taskHeartbeatPeriod;
    return this;
  }

   /**
   * Get taskHeartbeatPeriod
   * @return taskHeartbeatPeriod
  **/
  @Schema(description = "")
  public BigDecimal getTaskHeartbeatPeriod() {
    return taskHeartbeatPeriod;
  }

  public void setTaskHeartbeatPeriod(BigDecimal taskHeartbeatPeriod) {
    this.taskHeartbeatPeriod = taskHeartbeatPeriod;
  }

  public JobSettings taskManifestFlushPeriodMs(BigDecimal taskManifestFlushPeriodMs) {
    this.taskManifestFlushPeriodMs = taskManifestFlushPeriodMs;
    return this;
  }

   /**
   * Get taskManifestFlushPeriodMs
   * @return taskManifestFlushPeriodMs
  **/
  @Schema(description = "")
  public BigDecimal getTaskManifestFlushPeriodMs() {
    return taskManifestFlushPeriodMs;
  }

  public void setTaskManifestFlushPeriodMs(BigDecimal taskManifestFlushPeriodMs) {
    this.taskManifestFlushPeriodMs = taskManifestFlushPeriodMs;
  }

  public JobSettings taskManifestMaxBufferSize(BigDecimal taskManifestMaxBufferSize) {
    this.taskManifestMaxBufferSize = taskManifestMaxBufferSize;
    return this;
  }

   /**
   * Get taskManifestMaxBufferSize
   * @return taskManifestMaxBufferSize
  **/
  @Schema(description = "")
  public BigDecimal getTaskManifestMaxBufferSize() {
    return taskManifestMaxBufferSize;
  }

  public void setTaskManifestMaxBufferSize(BigDecimal taskManifestMaxBufferSize) {
    this.taskManifestMaxBufferSize = taskManifestMaxBufferSize;
  }

  public JobSettings taskManifestReadBufferSize(BigDecimal taskManifestReadBufferSize) {
    this.taskManifestReadBufferSize = taskManifestReadBufferSize;
    return this;
  }

   /**
   * Get taskManifestReadBufferSize
   * @return taskManifestReadBufferSize
  **/
  @Schema(description = "")
  public BigDecimal getTaskManifestReadBufferSize() {
    return taskManifestReadBufferSize;
  }

  public void setTaskManifestReadBufferSize(BigDecimal taskManifestReadBufferSize) {
    this.taskManifestReadBufferSize = taskManifestReadBufferSize;
  }

  public JobSettings taskPollTimeoutMs(BigDecimal taskPollTimeoutMs) {
    this.taskPollTimeoutMs = taskPollTimeoutMs;
    return this;
  }

   /**
   * Get taskPollTimeoutMs
   * @return taskPollTimeoutMs
  **/
  @Schema(description = "")
  public BigDecimal getTaskPollTimeoutMs() {
    return taskPollTimeoutMs;
  }

  public void setTaskPollTimeoutMs(BigDecimal taskPollTimeoutMs) {
    this.taskPollTimeoutMs = taskPollTimeoutMs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSettings jobSettings = (JobSettings) o;
    return Objects.equals(this.concurrentJobLimit, jobSettings.concurrentJobLimit) &&
        Objects.equals(this.concurrentScheduledJobLimit, jobSettings.concurrentScheduledJobLimit) &&
        Objects.equals(this.concurrentSystemJobLimit, jobSettings.concurrentSystemJobLimit) &&
        Objects.equals(this.concurrentSystemTaskLimit, jobSettings.concurrentSystemTaskLimit) &&
        Objects.equals(this.concurrentTaskLimit, jobSettings.concurrentTaskLimit) &&
        Objects.equals(this.finishedJobArtifactsLimit, jobSettings.finishedJobArtifactsLimit) &&
        Objects.equals(this.finishedTaskArtifactsLimit, jobSettings.finishedTaskArtifactsLimit) &&
        Objects.equals(this.jobArtifactsReaperPeriod, jobSettings.jobArtifactsReaperPeriod) &&
        Objects.equals(this.jobTimeout, jobSettings.jobTimeout) &&
        Objects.equals(this.maxTaskPerc, jobSettings.maxTaskPerc) &&
        Objects.equals(this.schedulingPolicy, jobSettings.schedulingPolicy) &&
        Objects.equals(this.taskHeartbeatPeriod, jobSettings.taskHeartbeatPeriod) &&
        Objects.equals(this.taskManifestFlushPeriodMs, jobSettings.taskManifestFlushPeriodMs) &&
        Objects.equals(this.taskManifestMaxBufferSize, jobSettings.taskManifestMaxBufferSize) &&
        Objects.equals(this.taskManifestReadBufferSize, jobSettings.taskManifestReadBufferSize) &&
        Objects.equals(this.taskPollTimeoutMs, jobSettings.taskPollTimeoutMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrentJobLimit, concurrentScheduledJobLimit, concurrentSystemJobLimit, concurrentSystemTaskLimit, concurrentTaskLimit, finishedJobArtifactsLimit, finishedTaskArtifactsLimit, jobArtifactsReaperPeriod, jobTimeout, maxTaskPerc, schedulingPolicy, taskHeartbeatPeriod, taskManifestFlushPeriodMs, taskManifestMaxBufferSize, taskManifestReadBufferSize, taskPollTimeoutMs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSettings {\n");
    
    sb.append("    concurrentJobLimit: ").append(toIndentedString(concurrentJobLimit)).append("\n");
    sb.append("    concurrentScheduledJobLimit: ").append(toIndentedString(concurrentScheduledJobLimit)).append("\n");
    sb.append("    concurrentSystemJobLimit: ").append(toIndentedString(concurrentSystemJobLimit)).append("\n");
    sb.append("    concurrentSystemTaskLimit: ").append(toIndentedString(concurrentSystemTaskLimit)).append("\n");
    sb.append("    concurrentTaskLimit: ").append(toIndentedString(concurrentTaskLimit)).append("\n");
    sb.append("    finishedJobArtifactsLimit: ").append(toIndentedString(finishedJobArtifactsLimit)).append("\n");
    sb.append("    finishedTaskArtifactsLimit: ").append(toIndentedString(finishedTaskArtifactsLimit)).append("\n");
    sb.append("    jobArtifactsReaperPeriod: ").append(toIndentedString(jobArtifactsReaperPeriod)).append("\n");
    sb.append("    jobTimeout: ").append(toIndentedString(jobTimeout)).append("\n");
    sb.append("    maxTaskPerc: ").append(toIndentedString(maxTaskPerc)).append("\n");
    sb.append("    schedulingPolicy: ").append(toIndentedString(schedulingPolicy)).append("\n");
    sb.append("    taskHeartbeatPeriod: ").append(toIndentedString(taskHeartbeatPeriod)).append("\n");
    sb.append("    taskManifestFlushPeriodMs: ").append(toIndentedString(taskManifestFlushPeriodMs)).append("\n");
    sb.append("    taskManifestMaxBufferSize: ").append(toIndentedString(taskManifestMaxBufferSize)).append("\n");
    sb.append("    taskManifestReadBufferSize: ").append(toIndentedString(taskManifestReadBufferSize)).append("\n");
    sb.append("    taskPollTimeoutMs: ").append(toIndentedString(taskPollTimeoutMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
