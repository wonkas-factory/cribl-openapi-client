/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.cribl.openapi.dto.NotificationMetadata;
import com.cribl.openapi.dto.SavedJobCollectionInputPreprocess;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * SavedJobCollectionInput
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class SavedJobCollectionInput {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COLLECTION("collection");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = TypeEnum.COLLECTION;

  @SerializedName("breakerRulesets")
  private List<String> breakerRulesets = null;

  @SerializedName("staleChannelFlushMs")
  private BigDecimal staleChannelFlushMs = new BigDecimal(10000);

  @SerializedName("sendToRoutes")
  private Boolean sendToRoutes = true;

  @SerializedName("preprocess")
  private SavedJobCollectionInputPreprocess preprocess = null;

  @SerializedName("throttleRatePerSec")
  private String throttleRatePerSec = "0";

  @SerializedName("metadata")
  private List<NotificationMetadata> metadata = null;

  public SavedJobCollectionInput type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SavedJobCollectionInput breakerRulesets(List<String> breakerRulesets) {
    this.breakerRulesets = breakerRulesets;
    return this;
  }

  public SavedJobCollectionInput addBreakerRulesetsItem(String breakerRulesetsItem) {
    if (this.breakerRulesets == null) {
      this.breakerRulesets = new ArrayList<>();
    }
    this.breakerRulesets.add(breakerRulesetsItem);
    return this;
  }

   /**
   * A list of event breaking rulesets that will be applied, in order, to the input data stream.
   * @return breakerRulesets
  **/
  @Schema(description = "A list of event breaking rulesets that will be applied, in order, to the input data stream.")
  public List<String> getBreakerRulesets() {
    return breakerRulesets;
  }

  public void setBreakerRulesets(List<String> breakerRulesets) {
    this.breakerRulesets = breakerRulesets;
  }

  public SavedJobCollectionInput staleChannelFlushMs(BigDecimal staleChannelFlushMs) {
    this.staleChannelFlushMs = staleChannelFlushMs;
    return this;
  }

   /**
   * The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.
   * minimum: 10
   * maximum: 600000
   * @return staleChannelFlushMs
  **/
  @Schema(description = "The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.")
  public BigDecimal getStaleChannelFlushMs() {
    return staleChannelFlushMs;
  }

  public void setStaleChannelFlushMs(BigDecimal staleChannelFlushMs) {
    this.staleChannelFlushMs = staleChannelFlushMs;
  }

  public SavedJobCollectionInput sendToRoutes(Boolean sendToRoutes) {
    this.sendToRoutes = sendToRoutes;
    return this;
  }

   /**
   * If set to Yes, events will be sent to normal routing and event processing. Set to No if you want to select a specific Pipeline/Destination combination.
   * @return sendToRoutes
  **/
  @Schema(description = "If set to Yes, events will be sent to normal routing and event processing. Set to No if you want to select a specific Pipeline/Destination combination.")
  public Boolean isSendToRoutes() {
    return sendToRoutes;
  }

  public void setSendToRoutes(Boolean sendToRoutes) {
    this.sendToRoutes = sendToRoutes;
  }

  public SavedJobCollectionInput preprocess(SavedJobCollectionInputPreprocess preprocess) {
    this.preprocess = preprocess;
    return this;
  }

   /**
   * Get preprocess
   * @return preprocess
  **/
  @Schema(description = "")
  public SavedJobCollectionInputPreprocess getPreprocess() {
    return preprocess;
  }

  public void setPreprocess(SavedJobCollectionInputPreprocess preprocess) {
    this.preprocess = preprocess;
  }

  public SavedJobCollectionInput throttleRatePerSec(String throttleRatePerSec) {
    this.throttleRatePerSec = throttleRatePerSec;
    return this;
  }

   /**
   * Rate (in bytes per second) to throttle while writing to an output. Also takes values with multiple-byte units, such as KB, MB, GB, etc. (E.g., 42 MB.) Default value of 0 specifies no throttling.
   * @return throttleRatePerSec
  **/
  @Schema(description = "Rate (in bytes per second) to throttle while writing to an output. Also takes values with multiple-byte units, such as KB, MB, GB, etc. (E.g., 42 MB.) Default value of 0 specifies no throttling.")
  public String getThrottleRatePerSec() {
    return throttleRatePerSec;
  }

  public void setThrottleRatePerSec(String throttleRatePerSec) {
    this.throttleRatePerSec = throttleRatePerSec;
  }

  public SavedJobCollectionInput metadata(List<NotificationMetadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  public SavedJobCollectionInput addMetadataItem(NotificationMetadata metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Fields to add.
   * @return metadata
  **/
  @Schema(description = "Fields to add.")
  public List<NotificationMetadata> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<NotificationMetadata> metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavedJobCollectionInput savedJobCollectionInput = (SavedJobCollectionInput) o;
    return Objects.equals(this.type, savedJobCollectionInput.type) &&
        Objects.equals(this.breakerRulesets, savedJobCollectionInput.breakerRulesets) &&
        Objects.equals(this.staleChannelFlushMs, savedJobCollectionInput.staleChannelFlushMs) &&
        Objects.equals(this.sendToRoutes, savedJobCollectionInput.sendToRoutes) &&
        Objects.equals(this.preprocess, savedJobCollectionInput.preprocess) &&
        Objects.equals(this.throttleRatePerSec, savedJobCollectionInput.throttleRatePerSec) &&
        Objects.equals(this.metadata, savedJobCollectionInput.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, breakerRulesets, staleChannelFlushMs, sendToRoutes, preprocess, throttleRatePerSec, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavedJobCollectionInput {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    breakerRulesets: ").append(toIndentedString(breakerRulesets)).append("\n");
    sb.append("    staleChannelFlushMs: ").append(toIndentedString(staleChannelFlushMs)).append("\n");
    sb.append("    sendToRoutes: ").append(toIndentedString(sendToRoutes)).append("\n");
    sb.append("    preprocess: ").append(toIndentedString(preprocess)).append("\n");
    sb.append("    throttleRatePerSec: ").append(toIndentedString(throttleRatePerSec)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
