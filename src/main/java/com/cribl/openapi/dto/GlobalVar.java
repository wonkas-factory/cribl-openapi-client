/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * GlobalVar
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class GlobalVar {
  @SerializedName("id")
  private String id = null;

  @SerializedName("lib")
  private String lib = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Type of variable.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STRING("string"),
    NUMBER("number"),
    BOOLEAN("boolean"),
    ARRAY("array"),
    OBJECT("object"),
    EXPRESSION("expression"),
    ANY("any");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = TypeEnum.ANY;

  @SerializedName("value")
  private String value = null;

  @SerializedName("tags")
  private String tags = null;

  public GlobalVar id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Global variable name.
   * @return id
  **/
  @Schema(required = true, description = "Global variable name.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public GlobalVar lib(String lib) {
    this.lib = lib;
    return this;
  }

   /**
   * Get lib
   * @return lib
  **/
  @Schema(description = "")
  public String getLib() {
    return lib;
  }

  public void setLib(String lib) {
    this.lib = lib;
  }

  public GlobalVar description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Brief description of this variable. Optional.
   * @return description
  **/
  @Schema(description = "Brief description of this variable. Optional.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public GlobalVar type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of variable.
   * @return type
  **/
  @Schema(required = true, description = "Type of variable.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public GlobalVar value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Value of variable
   * @return value
  **/
  @Schema(required = true, description = "Value of variable")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public GlobalVar tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * One more tags related to this variable. Optional.
   * @return tags
  **/
  @Schema(description = "One more tags related to this variable. Optional.")
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalVar globalVar = (GlobalVar) o;
    return Objects.equals(this.id, globalVar.id) &&
        Objects.equals(this.lib, globalVar.lib) &&
        Objects.equals(this.description, globalVar.description) &&
        Objects.equals(this.type, globalVar.type) &&
        Objects.equals(this.value, globalVar.value) &&
        Objects.equals(this.tags, globalVar.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lib, description, type, value, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalVar {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lib: ").append(toIndentedString(lib)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
