/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.cribl.openapi.dto.AggregationMgrOptions;
import com.cribl.openapi.dto.MetricsStore;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MetricsAggOpts
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class MetricsAggOpts {
  @SerializedName("aggs")
  private AggregationMgrOptions aggs = null;

  @SerializedName("alwaysBounds")
  private Boolean alwaysBounds = null;

  @SerializedName("metrics")
  private MetricsStore metrics = null;

  @SerializedName("where")
  private String where = null;

  public MetricsAggOpts aggs(AggregationMgrOptions aggs) {
    this.aggs = aggs;
    return this;
  }

   /**
   * Get aggs
   * @return aggs
  **/
  @Schema(description = "")
  public AggregationMgrOptions getAggs() {
    return aggs;
  }

  public void setAggs(AggregationMgrOptions aggs) {
    this.aggs = aggs;
  }

  public MetricsAggOpts alwaysBounds(Boolean alwaysBounds) {
    this.alwaysBounds = alwaysBounds;
    return this;
  }

   /**
   * Get alwaysBounds
   * @return alwaysBounds
  **/
  @Schema(description = "")
  public Boolean isAlwaysBounds() {
    return alwaysBounds;
  }

  public void setAlwaysBounds(Boolean alwaysBounds) {
    this.alwaysBounds = alwaysBounds;
  }

  public MetricsAggOpts metrics(MetricsStore metrics) {
    this.metrics = metrics;
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @Schema(description = "")
  public MetricsStore getMetrics() {
    return metrics;
  }

  public void setMetrics(MetricsStore metrics) {
    this.metrics = metrics;
  }

  public MetricsAggOpts where(String where) {
    this.where = where;
    return this;
  }

   /**
   * Get where
   * @return where
  **/
  @Schema(description = "")
  public String getWhere() {
    return where;
  }

  public void setWhere(String where) {
    this.where = where;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricsAggOpts metricsAggOpts = (MetricsAggOpts) o;
    return Objects.equals(this.aggs, metricsAggOpts.aggs) &&
        Objects.equals(this.alwaysBounds, metricsAggOpts.alwaysBounds) &&
        Objects.equals(this.metrics, metricsAggOpts.metrics) &&
        Objects.equals(this.where, metricsAggOpts.where);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggs, alwaysBounds, metrics, where);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricsAggOpts {\n");
    
    sb.append("    aggs: ").append(toIndentedString(aggs)).append("\n");
    sb.append("    alwaysBounds: ").append(toIndentedString(alwaysBounds)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
