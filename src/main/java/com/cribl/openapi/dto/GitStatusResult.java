/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.cribl.openapi.dto.GitStatusResultFiles;
import com.cribl.openapi.dto.GitStatusResultRenamed;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * GitStatusResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class GitStatusResult {
  @SerializedName("ahead")
  private BigDecimal ahead = null;

  @SerializedName("behind")
  private BigDecimal behind = null;

  @SerializedName("conflicted")
  private List<String> conflicted = null;

  @SerializedName("created")
  private List<String> created = null;

  @SerializedName("current")
  private String current = null;

  @SerializedName("deleted")
  private List<String> deleted = null;

  @SerializedName("files")
  private List<GitStatusResultFiles> files = null;

  @SerializedName("modified")
  private List<String> modified = null;

  @SerializedName("not_added")
  private List<String> notAdded = null;

  @SerializedName("renamed")
  private List<GitStatusResultRenamed> renamed = null;

  @SerializedName("staged")
  private List<String> staged = null;

  @SerializedName("tracking")
  private String tracking = null;

  public GitStatusResult ahead(BigDecimal ahead) {
    this.ahead = ahead;
    return this;
  }

   /**
   * Get ahead
   * @return ahead
  **/
  @Schema(description = "")
  public BigDecimal getAhead() {
    return ahead;
  }

  public void setAhead(BigDecimal ahead) {
    this.ahead = ahead;
  }

  public GitStatusResult behind(BigDecimal behind) {
    this.behind = behind;
    return this;
  }

   /**
   * Get behind
   * @return behind
  **/
  @Schema(description = "")
  public BigDecimal getBehind() {
    return behind;
  }

  public void setBehind(BigDecimal behind) {
    this.behind = behind;
  }

  public GitStatusResult conflicted(List<String> conflicted) {
    this.conflicted = conflicted;
    return this;
  }

  public GitStatusResult addConflictedItem(String conflictedItem) {
    if (this.conflicted == null) {
      this.conflicted = new ArrayList<>();
    }
    this.conflicted.add(conflictedItem);
    return this;
  }

   /**
   * Get conflicted
   * @return conflicted
  **/
  @Schema(description = "")
  public List<String> getConflicted() {
    return conflicted;
  }

  public void setConflicted(List<String> conflicted) {
    this.conflicted = conflicted;
  }

  public GitStatusResult created(List<String> created) {
    this.created = created;
    return this;
  }

  public GitStatusResult addCreatedItem(String createdItem) {
    if (this.created == null) {
      this.created = new ArrayList<>();
    }
    this.created.add(createdItem);
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public List<String> getCreated() {
    return created;
  }

  public void setCreated(List<String> created) {
    this.created = created;
  }

  public GitStatusResult current(String current) {
    this.current = current;
    return this;
  }

   /**
   * Get current
   * @return current
  **/
  @Schema(description = "")
  public String getCurrent() {
    return current;
  }

  public void setCurrent(String current) {
    this.current = current;
  }

  public GitStatusResult deleted(List<String> deleted) {
    this.deleted = deleted;
    return this;
  }

  public GitStatusResult addDeletedItem(String deletedItem) {
    if (this.deleted == null) {
      this.deleted = new ArrayList<>();
    }
    this.deleted.add(deletedItem);
    return this;
  }

   /**
   * Get deleted
   * @return deleted
  **/
  @Schema(description = "")
  public List<String> getDeleted() {
    return deleted;
  }

  public void setDeleted(List<String> deleted) {
    this.deleted = deleted;
  }

  public GitStatusResult files(List<GitStatusResultFiles> files) {
    this.files = files;
    return this;
  }

  public GitStatusResult addFilesItem(GitStatusResultFiles filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @Schema(description = "")
  public List<GitStatusResultFiles> getFiles() {
    return files;
  }

  public void setFiles(List<GitStatusResultFiles> files) {
    this.files = files;
  }

  public GitStatusResult modified(List<String> modified) {
    this.modified = modified;
    return this;
  }

  public GitStatusResult addModifiedItem(String modifiedItem) {
    if (this.modified == null) {
      this.modified = new ArrayList<>();
    }
    this.modified.add(modifiedItem);
    return this;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public List<String> getModified() {
    return modified;
  }

  public void setModified(List<String> modified) {
    this.modified = modified;
  }

  public GitStatusResult notAdded(List<String> notAdded) {
    this.notAdded = notAdded;
    return this;
  }

  public GitStatusResult addNotAddedItem(String notAddedItem) {
    if (this.notAdded == null) {
      this.notAdded = new ArrayList<>();
    }
    this.notAdded.add(notAddedItem);
    return this;
  }

   /**
   * Get notAdded
   * @return notAdded
  **/
  @Schema(description = "")
  public List<String> getNotAdded() {
    return notAdded;
  }

  public void setNotAdded(List<String> notAdded) {
    this.notAdded = notAdded;
  }

  public GitStatusResult renamed(List<GitStatusResultRenamed> renamed) {
    this.renamed = renamed;
    return this;
  }

  public GitStatusResult addRenamedItem(GitStatusResultRenamed renamedItem) {
    if (this.renamed == null) {
      this.renamed = new ArrayList<>();
    }
    this.renamed.add(renamedItem);
    return this;
  }

   /**
   * Get renamed
   * @return renamed
  **/
  @Schema(description = "")
  public List<GitStatusResultRenamed> getRenamed() {
    return renamed;
  }

  public void setRenamed(List<GitStatusResultRenamed> renamed) {
    this.renamed = renamed;
  }

  public GitStatusResult staged(List<String> staged) {
    this.staged = staged;
    return this;
  }

  public GitStatusResult addStagedItem(String stagedItem) {
    if (this.staged == null) {
      this.staged = new ArrayList<>();
    }
    this.staged.add(stagedItem);
    return this;
  }

   /**
   * Get staged
   * @return staged
  **/
  @Schema(description = "")
  public List<String> getStaged() {
    return staged;
  }

  public void setStaged(List<String> staged) {
    this.staged = staged;
  }

  public GitStatusResult tracking(String tracking) {
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @Schema(description = "")
  public String getTracking() {
    return tracking;
  }

  public void setTracking(String tracking) {
    this.tracking = tracking;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitStatusResult gitStatusResult = (GitStatusResult) o;
    return Objects.equals(this.ahead, gitStatusResult.ahead) &&
        Objects.equals(this.behind, gitStatusResult.behind) &&
        Objects.equals(this.conflicted, gitStatusResult.conflicted) &&
        Objects.equals(this.created, gitStatusResult.created) &&
        Objects.equals(this.current, gitStatusResult.current) &&
        Objects.equals(this.deleted, gitStatusResult.deleted) &&
        Objects.equals(this.files, gitStatusResult.files) &&
        Objects.equals(this.modified, gitStatusResult.modified) &&
        Objects.equals(this.notAdded, gitStatusResult.notAdded) &&
        Objects.equals(this.renamed, gitStatusResult.renamed) &&
        Objects.equals(this.staged, gitStatusResult.staged) &&
        Objects.equals(this.tracking, gitStatusResult.tracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ahead, behind, conflicted, created, current, deleted, files, modified, notAdded, renamed, staged, tracking);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitStatusResult {\n");
    
    sb.append("    ahead: ").append(toIndentedString(ahead)).append("\n");
    sb.append("    behind: ").append(toIndentedString(behind)).append("\n");
    sb.append("    conflicted: ").append(toIndentedString(conflicted)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    notAdded: ").append(toIndentedString(notAdded)).append("\n");
    sb.append("    renamed: ").append(toIndentedString(renamed)).append("\n");
    sb.append("    staged: ").append(toIndentedString(staged)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
