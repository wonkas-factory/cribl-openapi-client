/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * InputStatusTcpjsonMetrics
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class InputStatusTcpjsonMetrics implements OneOfInputStatusStatusMetrics {
  @SerializedName("address")
  private String address = null;

  @SerializedName("persistentQueueSize")
  private BigDecimal persistentQueueSize = null;

  @SerializedName("activeSockets")
  private BigDecimal activeSockets = null;

  @SerializedName("activeBreakers")
  private BigDecimal activeBreakers = null;

  @SerializedName("received")
  private BigDecimal received = null;

  @SerializedName("broken")
  private BigDecimal broken = null;

  @SerializedName("tcpJsonParseErrors")
  private BigDecimal tcpJsonParseErrors = null;

  @SerializedName("tcpJsonEvents")
  private BigDecimal tcpJsonEvents = null;

  @SerializedName("tcpJsonAuthed")
  private Boolean tcpJsonAuthed = null;

  @SerializedName("tcpJsonCommonFields")
  private List<String> tcpJsonCommonFields = null;

  @SerializedName("tcpJsonClosed")
  private Boolean tcpJsonClosed = null;

  public InputStatusTcpjsonMetrics address(String address) {
    this.address = address;
    return this;
  }

   /**
   * IP address for this connection
   * @return address
  **/
  @Schema(description = "IP address for this connection")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public InputStatusTcpjsonMetrics persistentQueueSize(BigDecimal persistentQueueSize) {
    this.persistentQueueSize = persistentQueueSize;
    return this;
  }

   /**
   * The number of bytes stored in the persistent queue
   * @return persistentQueueSize
  **/
  @Schema(description = "The number of bytes stored in the persistent queue")
  public BigDecimal getPersistentQueueSize() {
    return persistentQueueSize;
  }

  public void setPersistentQueueSize(BigDecimal persistentQueueSize) {
    this.persistentQueueSize = persistentQueueSize;
  }

  public InputStatusTcpjsonMetrics activeSockets(BigDecimal activeSockets) {
    this.activeSockets = activeSockets;
    return this;
  }

   /**
   * The number of active sockets
   * @return activeSockets
  **/
  @Schema(description = "The number of active sockets")
  public BigDecimal getActiveSockets() {
    return activeSockets;
  }

  public void setActiveSockets(BigDecimal activeSockets) {
    this.activeSockets = activeSockets;
  }

  public InputStatusTcpjsonMetrics activeBreakers(BigDecimal activeBreakers) {
    this.activeBreakers = activeBreakers;
    return this;
  }

   /**
   * The number of active event breakers
   * @return activeBreakers
  **/
  @Schema(description = "The number of active event breakers")
  public BigDecimal getActiveBreakers() {
    return activeBreakers;
  }

  public void setActiveBreakers(BigDecimal activeBreakers) {
    this.activeBreakers = activeBreakers;
  }

  public InputStatusTcpjsonMetrics received(BigDecimal received) {
    this.received = received;
    return this;
  }

   /**
   * The number of events that have been received with this input
   * @return received
  **/
  @Schema(description = "The number of events that have been received with this input")
  public BigDecimal getReceived() {
    return received;
  }

  public void setReceived(BigDecimal received) {
    this.received = received;
  }

  public InputStatusTcpjsonMetrics broken(BigDecimal broken) {
    this.broken = broken;
    return this;
  }

   /**
   * The number of events generated from event breaking
   * @return broken
  **/
  @Schema(description = "The number of events generated from event breaking")
  public BigDecimal getBroken() {
    return broken;
  }

  public void setBroken(BigDecimal broken) {
    this.broken = broken;
  }

  public InputStatusTcpjsonMetrics tcpJsonParseErrors(BigDecimal tcpJsonParseErrors) {
    this.tcpJsonParseErrors = tcpJsonParseErrors;
    return this;
  }

   /**
   * Event parsing errors that have occurred since connection
   * @return tcpJsonParseErrors
  **/
  @Schema(description = "Event parsing errors that have occurred since connection")
  public BigDecimal getTcpJsonParseErrors() {
    return tcpJsonParseErrors;
  }

  public void setTcpJsonParseErrors(BigDecimal tcpJsonParseErrors) {
    this.tcpJsonParseErrors = tcpJsonParseErrors;
  }

  public InputStatusTcpjsonMetrics tcpJsonEvents(BigDecimal tcpJsonEvents) {
    this.tcpJsonEvents = tcpJsonEvents;
    return this;
  }

   /**
   * The total number of events that have been sent since connection
   * @return tcpJsonEvents
  **/
  @Schema(description = "The total number of events that have been sent since connection")
  public BigDecimal getTcpJsonEvents() {
    return tcpJsonEvents;
  }

  public void setTcpJsonEvents(BigDecimal tcpJsonEvents) {
    this.tcpJsonEvents = tcpJsonEvents;
  }

  public InputStatusTcpjsonMetrics tcpJsonAuthed(Boolean tcpJsonAuthed) {
    this.tcpJsonAuthed = tcpJsonAuthed;
    return this;
  }

   /**
   * Has this connection been authenticated?
   * @return tcpJsonAuthed
  **/
  @Schema(description = "Has this connection been authenticated?")
  public Boolean isTcpJsonAuthed() {
    return tcpJsonAuthed;
  }

  public void setTcpJsonAuthed(Boolean tcpJsonAuthed) {
    this.tcpJsonAuthed = tcpJsonAuthed;
  }

  public InputStatusTcpjsonMetrics tcpJsonCommonFields(List<String> tcpJsonCommonFields) {
    this.tcpJsonCommonFields = tcpJsonCommonFields;
    return this;
  }

  public InputStatusTcpjsonMetrics addTcpJsonCommonFieldsItem(String tcpJsonCommonFieldsItem) {
    if (this.tcpJsonCommonFields == null) {
      this.tcpJsonCommonFields = new ArrayList<>();
    }
    this.tcpJsonCommonFields.add(tcpJsonCommonFieldsItem);
    return this;
  }

   /**
   * Fields that appear in all events from this connection.
   * @return tcpJsonCommonFields
  **/
  @Schema(description = "Fields that appear in all events from this connection.")
  public List<String> getTcpJsonCommonFields() {
    return tcpJsonCommonFields;
  }

  public void setTcpJsonCommonFields(List<String> tcpJsonCommonFields) {
    this.tcpJsonCommonFields = tcpJsonCommonFields;
  }

  public InputStatusTcpjsonMetrics tcpJsonClosed(Boolean tcpJsonClosed) {
    this.tcpJsonClosed = tcpJsonClosed;
    return this;
  }

   /**
   * The connection has been closed an no longer accepting events.
   * @return tcpJsonClosed
  **/
  @Schema(description = "The connection has been closed an no longer accepting events.")
  public Boolean isTcpJsonClosed() {
    return tcpJsonClosed;
  }

  public void setTcpJsonClosed(Boolean tcpJsonClosed) {
    this.tcpJsonClosed = tcpJsonClosed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputStatusTcpjsonMetrics inputStatusTcpjsonMetrics = (InputStatusTcpjsonMetrics) o;
    return Objects.equals(this.address, inputStatusTcpjsonMetrics.address) &&
        Objects.equals(this.persistentQueueSize, inputStatusTcpjsonMetrics.persistentQueueSize) &&
        Objects.equals(this.activeSockets, inputStatusTcpjsonMetrics.activeSockets) &&
        Objects.equals(this.activeBreakers, inputStatusTcpjsonMetrics.activeBreakers) &&
        Objects.equals(this.received, inputStatusTcpjsonMetrics.received) &&
        Objects.equals(this.broken, inputStatusTcpjsonMetrics.broken) &&
        Objects.equals(this.tcpJsonParseErrors, inputStatusTcpjsonMetrics.tcpJsonParseErrors) &&
        Objects.equals(this.tcpJsonEvents, inputStatusTcpjsonMetrics.tcpJsonEvents) &&
        Objects.equals(this.tcpJsonAuthed, inputStatusTcpjsonMetrics.tcpJsonAuthed) &&
        Objects.equals(this.tcpJsonCommonFields, inputStatusTcpjsonMetrics.tcpJsonCommonFields) &&
        Objects.equals(this.tcpJsonClosed, inputStatusTcpjsonMetrics.tcpJsonClosed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, persistentQueueSize, activeSockets, activeBreakers, received, broken, tcpJsonParseErrors, tcpJsonEvents, tcpJsonAuthed, tcpJsonCommonFields, tcpJsonClosed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputStatusTcpjsonMetrics {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    persistentQueueSize: ").append(toIndentedString(persistentQueueSize)).append("\n");
    sb.append("    activeSockets: ").append(toIndentedString(activeSockets)).append("\n");
    sb.append("    activeBreakers: ").append(toIndentedString(activeBreakers)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    broken: ").append(toIndentedString(broken)).append("\n");
    sb.append("    tcpJsonParseErrors: ").append(toIndentedString(tcpJsonParseErrors)).append("\n");
    sb.append("    tcpJsonEvents: ").append(toIndentedString(tcpJsonEvents)).append("\n");
    sb.append("    tcpJsonAuthed: ").append(toIndentedString(tcpJsonAuthed)).append("\n");
    sb.append("    tcpJsonCommonFields: ").append(toIndentedString(tcpJsonCommonFields)).append("\n");
    sb.append("    tcpJsonClosed: ").append(toIndentedString(tcpJsonClosed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
