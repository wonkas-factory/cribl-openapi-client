/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.service;

import com.cribl.openapi.client.ApiException;
import com.cribl.openapi.dto.Error;
import com.cribl.openapi.dto.InlineResponse20015;
import com.cribl.openapi.dto.InlineResponse20047;
import com.cribl.openapi.dto.InlineResponse20048;
import com.cribl.openapi.dto.InlineResponse20049;
import com.cribl.openapi.dto.InlineResponse20050;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VersioningApi
 */
@Ignore
public class VersioningApiTest {

    private final VersioningApi api = new VersioningApi();

    /**
     * create a new commit containing the current configs the given log message describing the changes.
     *
     * create a new commit containing the current configs the given log message describing the changes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionCommitPostTest() throws ApiException {
        InlineResponse20047 response = api.versionCommitPost();

        // TODO: test validations
    }
    /**
     * get the count of files of changed
     *
     * get the count of files of changed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionCountGetTest() throws ApiException {
        String group = null;
        InlineResponse20015 response = api.versionCountGet(group);

        // TODO: test validations
    }
    /**
     * get the textual diff for given commit
     *
     * get the textual diff for given commit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionDiffGetTest() throws ApiException {
        String commit = null;
        String group = null;
        InlineResponse20015 response = api.versionDiffGet(commit, group);

        // TODO: test validations
    }
    /**
     * get the files changed
     *
     * get the files changed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionFilesGetTest() throws ApiException {
        String group = null;
        InlineResponse20048 response = api.versionFilesGet(group);

        // TODO: test validations
    }
    /**
     * Get info about versioning availability
     *
     * Get info about versioning availability
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionInfoGetTest() throws ApiException {
        InlineResponse20049 response = api.versionInfoGet();

        // TODO: test validations
    }
    /**
     * push the current configs to the remote repository.
     *
     * push the current configs to the remote repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionPushPostTest() throws ApiException {
        InlineResponse20015 response = api.versionPushPost();

        // TODO: test validations
    }
    /**
     * get the log message and textual diff for given commit
     *
     * get the log message and textual diff for given commit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionShowGetTest() throws ApiException {
        String commit = null;
        String group = null;
        InlineResponse20015 response = api.versionShowGet(commit, group);

        // TODO: test validations
    }
    /**
     * get the the working tree status
     *
     * get the the working tree status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionStatusGetTest() throws ApiException {
        String group = null;
        InlineResponse20050 response = api.versionStatusGet(group);

        // TODO: test validations
    }
}
