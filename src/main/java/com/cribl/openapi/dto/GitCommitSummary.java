/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.cribl.openapi.dto.GitCommitSummaryAuthor;
import com.cribl.openapi.dto.GitCommitSummarySummary;
import com.cribl.openapi.dto.GitFileStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * GitCommitSummary
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class GitCommitSummary {
  @SerializedName("author")
  private GitCommitSummaryAuthor author = null;

  @SerializedName("branch")
  private String branch = null;

  @SerializedName("commit")
  private String commit = null;

  @SerializedName("files")
  private GitFileStatus files = null;

  @SerializedName("summary")
  private GitCommitSummarySummary summary = null;

  public GitCommitSummary author(GitCommitSummaryAuthor author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @Schema(description = "")
  public GitCommitSummaryAuthor getAuthor() {
    return author;
  }

  public void setAuthor(GitCommitSummaryAuthor author) {
    this.author = author;
  }

  public GitCommitSummary branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @Schema(description = "")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public GitCommitSummary commit(String commit) {
    this.commit = commit;
    return this;
  }

   /**
   * Get commit
   * @return commit
  **/
  @Schema(description = "")
  public String getCommit() {
    return commit;
  }

  public void setCommit(String commit) {
    this.commit = commit;
  }

  public GitCommitSummary files(GitFileStatus files) {
    this.files = files;
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @Schema(description = "")
  public GitFileStatus getFiles() {
    return files;
  }

  public void setFiles(GitFileStatus files) {
    this.files = files;
  }

  public GitCommitSummary summary(GitCommitSummarySummary summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(description = "")
  public GitCommitSummarySummary getSummary() {
    return summary;
  }

  public void setSummary(GitCommitSummarySummary summary) {
    this.summary = summary;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitCommitSummary gitCommitSummary = (GitCommitSummary) o;
    return Objects.equals(this.author, gitCommitSummary.author) &&
        Objects.equals(this.branch, gitCommitSummary.branch) &&
        Objects.equals(this.commit, gitCommitSummary.commit) &&
        Objects.equals(this.files, gitCommitSummary.files) &&
        Objects.equals(this.summary, gitCommitSummary.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, branch, commit, files, summary);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitCommitSummary {\n");
    
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
