/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NotificationTargetRouterRules
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class NotificationTargetRouterRules {
  @SerializedName("filter")
  private String filter = null;

  @SerializedName("output")
  private String output = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("final")
  private Boolean _final = true;

  public NotificationTargetRouterRules filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * JavaScript expression to select events to send to output
   * @return filter
  **/
  @Schema(required = true, description = "JavaScript expression to select events to send to output")
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }

  public NotificationTargetRouterRules output(String output) {
    this.output = output;
    return this;
  }

   /**
   * Output to send matching events to
   * @return output
  **/
  @Schema(required = true, description = "Output to send matching events to")
  public String getOutput() {
    return output;
  }

  public void setOutput(String output) {
    this.output = output;
  }

  public NotificationTargetRouterRules description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of this rule&#x27;s purpose
   * @return description
  **/
  @Schema(description = "Description of this rule's purpose")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public NotificationTargetRouterRules _final(Boolean _final) {
    this._final = _final;
    return this;
  }

   /**
   * Flag to control whether to stop the event from being checked against other rules
   * @return _final
  **/
  @Schema(description = "Flag to control whether to stop the event from being checked against other rules")
  public Boolean isFinal() {
    return _final;
  }

  public void setFinal(Boolean _final) {
    this._final = _final;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationTargetRouterRules notificationTargetRouterRules = (NotificationTargetRouterRules) o;
    return Objects.equals(this.filter, notificationTargetRouterRules.filter) &&
        Objects.equals(this.output, notificationTargetRouterRules.output) &&
        Objects.equals(this.description, notificationTargetRouterRules.description) &&
        Objects.equals(this._final, notificationTargetRouterRules._final);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, output, description, _final);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationTargetRouterRules {\n");
    
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _final: ").append(toIndentedString(_final)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
