/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.cribl.openapi.dto.VersionInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * UpgradeResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class UpgradeResult {
  @SerializedName("availableVersions")
  private List<VersionInfo> availableVersions = null;

  @SerializedName("canUpgrade")
  private Boolean canUpgrade = null;

  @SerializedName("installedVersion")
  private VersionInfo installedVersion = null;

  @SerializedName("isSuccess")
  private Boolean isSuccess = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("upgradedToVersion")
  private VersionInfo upgradedToVersion = null;

  public UpgradeResult availableVersions(List<VersionInfo> availableVersions) {
    this.availableVersions = availableVersions;
    return this;
  }

  public UpgradeResult addAvailableVersionsItem(VersionInfo availableVersionsItem) {
    if (this.availableVersions == null) {
      this.availableVersions = new ArrayList<>();
    }
    this.availableVersions.add(availableVersionsItem);
    return this;
  }

   /**
   * Get availableVersions
   * @return availableVersions
  **/
  @Schema(description = "")
  public List<VersionInfo> getAvailableVersions() {
    return availableVersions;
  }

  public void setAvailableVersions(List<VersionInfo> availableVersions) {
    this.availableVersions = availableVersions;
  }

  public UpgradeResult canUpgrade(Boolean canUpgrade) {
    this.canUpgrade = canUpgrade;
    return this;
  }

   /**
   * Get canUpgrade
   * @return canUpgrade
  **/
  @Schema(description = "")
  public Boolean isCanUpgrade() {
    return canUpgrade;
  }

  public void setCanUpgrade(Boolean canUpgrade) {
    this.canUpgrade = canUpgrade;
  }

  public UpgradeResult installedVersion(VersionInfo installedVersion) {
    this.installedVersion = installedVersion;
    return this;
  }

   /**
   * Get installedVersion
   * @return installedVersion
  **/
  @Schema(description = "")
  public VersionInfo getInstalledVersion() {
    return installedVersion;
  }

  public void setInstalledVersion(VersionInfo installedVersion) {
    this.installedVersion = installedVersion;
  }

  public UpgradeResult isSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
    return this;
  }

   /**
   * Get isSuccess
   * @return isSuccess
  **/
  @Schema(description = "")
  public Boolean isIsSuccess() {
    return isSuccess;
  }

  public void setIsSuccess(Boolean isSuccess) {
    this.isSuccess = isSuccess;
  }

  public UpgradeResult message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public UpgradeResult upgradedToVersion(VersionInfo upgradedToVersion) {
    this.upgradedToVersion = upgradedToVersion;
    return this;
  }

   /**
   * Get upgradedToVersion
   * @return upgradedToVersion
  **/
  @Schema(description = "")
  public VersionInfo getUpgradedToVersion() {
    return upgradedToVersion;
  }

  public void setUpgradedToVersion(VersionInfo upgradedToVersion) {
    this.upgradedToVersion = upgradedToVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeResult upgradeResult = (UpgradeResult) o;
    return Objects.equals(this.availableVersions, upgradeResult.availableVersions) &&
        Objects.equals(this.canUpgrade, upgradeResult.canUpgrade) &&
        Objects.equals(this.installedVersion, upgradeResult.installedVersion) &&
        Objects.equals(this.isSuccess, upgradeResult.isSuccess) &&
        Objects.equals(this.message, upgradeResult.message) &&
        Objects.equals(this.upgradedToVersion, upgradeResult.upgradedToVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableVersions, canUpgrade, installedVersion, isSuccess, message, upgradedToVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeResult {\n");
    
    sb.append("    availableVersions: ").append(toIndentedString(availableVersions)).append("\n");
    sb.append("    canUpgrade: ").append(toIndentedString(canUpgrade)).append("\n");
    sb.append("    installedVersion: ").append(toIndentedString(installedVersion)).append("\n");
    sb.append("    isSuccess: ").append(toIndentedString(isSuccess)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    upgradedToVersion: ").append(toIndentedString(upgradedToVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
