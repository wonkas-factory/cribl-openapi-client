/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.service;

import com.cribl.openapi.client.ApiException;
import com.cribl.openapi.dto.AddHecTokenRequest;
import com.cribl.openapi.dto.Error;
import com.cribl.openapi.dto.InlineResponse20014;
import com.cribl.openapi.dto.InlineResponse20015;
import com.cribl.openapi.dto.InlineResponse20024;
import com.cribl.openapi.dto.Input;
import com.cribl.openapi.dto.UpdateHecTokenRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InputsApi
 */
@Ignore
public class InputsApiTest {

    private final InputsApi api = new InputsApi();

    /**
     * Get a list of Input objects
     *
     * Get a list of Input objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsGetTest() throws ApiException {
        InlineResponse20014 response = api.systemInputsGet();

        // TODO: test validations
    }
    /**
     * Delete Input
     *
     * Delete Input
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsIdDeleteTest() throws ApiException {
        String id = null;
        InlineResponse20014 response = api.systemInputsIdDelete(id);

        // TODO: test validations
    }
    /**
     * Get Input by ID
     *
     * Get Input by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsIdGetTest() throws ApiException {
        String id = null;
        InlineResponse20014 response = api.systemInputsIdGet(id);

        // TODO: test validations
    }
    /**
     * Add token and optional metadata to an existing hec input
     *
     * Add token and optional metadata to an existing hec input
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsIdHectokenPostTest() throws ApiException {
        String id = null;
        AddHecTokenRequest body = null;
        InlineResponse20015 response = api.systemInputsIdHectokenPost(id, body);

        // TODO: test validations
    }
    /**
     * Update token metadata on existing hec input
     *
     * Update token metadata on existing hec input
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsIdHectokenTokenPatchTest() throws ApiException {
        String id = null;
        String token = null;
        UpdateHecTokenRequest body = null;
        InlineResponse20015 response = api.systemInputsIdHectokenTokenPatch(id, token, body);

        // TODO: test validations
    }
    /**
     * Update Input
     *
     * Update Input
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsIdPatchTest() throws ApiException {
        String id = null;
        Input body = null;
        InlineResponse20014 response = api.systemInputsIdPatch(id, body);

        // TODO: test validations
    }
    /**
     * Create Input
     *
     * Create Input
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInputsPostTest() throws ApiException {
        Input body = null;
        InlineResponse20014 response = api.systemInputsPost(body);

        // TODO: test validations
    }
    /**
     * Get a list of InputStatus objects
     *
     * Get a list of InputStatus objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusInputsGetTest() throws ApiException {
        InlineResponse20024 response = api.systemStatusInputsGet();

        // TODO: test validations
    }
    /**
     * Get InputStatus by ID
     *
     * Get InputStatus by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemStatusInputsIdGetTest() throws ApiException {
        String id = null;
        InlineResponse20024 response = api.systemStatusInputsIdGet(id);

        // TODO: test validations
    }
}
