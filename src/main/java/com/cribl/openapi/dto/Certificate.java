/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Certificate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-10-08T00:23:34.796-04:00[America/New_York]")
public class Certificate {
  @SerializedName("id")
  private String id = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("cert")
  private String cert = null;

  @SerializedName("privKey")
  private String privKey = null;

  @SerializedName("passphrase")
  private String passphrase = null;

  @SerializedName("ca")
  private String ca = null;

  @SerializedName("inUse")
  private List<String> inUse = null;

  public Certificate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Name of the certificate.
   * @return id
  **/
  @Schema(required = true, description = "Name of the certificate.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Certificate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Brief description of this certificate. Optional.
   * @return description
  **/
  @Schema(description = "Brief description of this certificate. Optional.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Certificate cert(String cert) {
    this.cert = cert;
    return this;
  }

   /**
   * Certificate body.
   * @return cert
  **/
  @Schema(required = true, description = "Certificate body.")
  public String getCert() {
    return cert;
  }

  public void setCert(String cert) {
    this.cert = cert;
  }

  public Certificate privKey(String privKey) {
    this.privKey = privKey;
    return this;
  }

   /**
   * Certificate private key.
   * @return privKey
  **/
  @Schema(required = true, description = "Certificate private key.")
  public String getPrivKey() {
    return privKey;
  }

  public void setPrivKey(String privKey) {
    this.privKey = privKey;
  }

  public Certificate passphrase(String passphrase) {
    this.passphrase = passphrase;
    return this;
  }

   /**
   * Passphrase. Optional.
   * @return passphrase
  **/
  @Schema(description = "Passphrase. Optional.")
  public String getPassphrase() {
    return passphrase;
  }

  public void setPassphrase(String passphrase) {
    this.passphrase = passphrase;
  }

  public Certificate ca(String ca) {
    this.ca = ca;
    return this;
  }

   /**
   * Certificate chain. Optional.
   * @return ca
  **/
  @Schema(description = "Certificate chain. Optional.")
  public String getCa() {
    return ca;
  }

  public void setCa(String ca) {
    this.ca = ca;
  }

  public Certificate inUse(List<String> inUse) {
    this.inUse = inUse;
    return this;
  }

  public Certificate addInUseItem(String inUseItem) {
    if (this.inUse == null) {
      this.inUse = new ArrayList<>();
    }
    this.inUse.add(inUseItem);
    return this;
  }

   /**
   * List of configurations referencing this certificate.
   * @return inUse
  **/
  @Schema(description = "List of configurations referencing this certificate.")
  public List<String> getInUse() {
    return inUse;
  }

  public void setInUse(List<String> inUse) {
    this.inUse = inUse;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Certificate certificate = (Certificate) o;
    return Objects.equals(this.id, certificate.id) &&
        Objects.equals(this.description, certificate.description) &&
        Objects.equals(this.cert, certificate.cert) &&
        Objects.equals(this.privKey, certificate.privKey) &&
        Objects.equals(this.passphrase, certificate.passphrase) &&
        Objects.equals(this.ca, certificate.ca) &&
        Objects.equals(this.inUse, certificate.inUse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, cert, privKey, passphrase, ca, inUse);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Certificate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cert: ").append(toIndentedString(cert)).append("\n");
    sb.append("    privKey: ").append(toIndentedString(privKey)).append("\n");
    sb.append("    passphrase: ").append(toIndentedString(passphrase)).append("\n");
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
