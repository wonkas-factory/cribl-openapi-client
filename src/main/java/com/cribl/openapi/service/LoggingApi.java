/*
 * Cribl LogStream
 * REST API Reference of available endpoints and their supported operations for accessing, updating, creating, or deleting resources. Product documentation available at [docs.cribl.io](http://docs.cribl.io).
 *
 * OpenAPI spec version: 3.1.2-abb571bc
 * Contact: support@cribl.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.cribl.openapi.service;

import com.cribl.openapi.client.ApiCallback;
import com.cribl.openapi.client.ApiClient;
import com.cribl.openapi.client.ApiException;
import com.cribl.openapi.client.ApiResponse;
import com.cribl.openapi.client.Configuration;
import com.cribl.openapi.client.Pair;
import com.cribl.openapi.client.ProgressRequestBody;
import com.cribl.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cribl.openapi.dto.Error;
import com.cribl.openapi.dto.InlineResponse20015;
import com.cribl.openapi.dto.InlineResponse20038;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoggingApi {
    private ApiClient apiClient;

    public LoggingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoggingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for systemJobsLogsIdGroupIdGet
     * @param id Job id (required)
     * @param groupId Group ID (optional) (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param offset Offset in the current log file to fetch the log events from. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemJobsLogsIdGroupIdGetCall(String id, String groupId, Integer limit, Integer offset, Integer endOffset, Integer et, Integer lt, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/system/jobs/logs/{id}/{groupId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (endOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endOffset", endOffset));
        if (et != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("et", et));
        if (lt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lt", lt));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemJobsLogsIdGroupIdGetValidateBeforeCall(String id, String groupId, Integer limit, Integer offset, Integer endOffset, Integer et, Integer lt, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemJobsLogsIdGroupIdGet(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling systemJobsLogsIdGroupIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = systemJobsLogsIdGroupIdGetCall(id, groupId, limit, offset, endOffset, et, lt, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get contents of the log file
     * Get contents of the log file
     * @param id Job id (required)
     * @param groupId Group ID (optional) (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param offset Offset in the current log file to fetch the log events from. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 systemJobsLogsIdGroupIdGet(String id, String groupId, Integer limit, Integer offset, Integer endOffset, Integer et, Integer lt, String filter) throws ApiException {
        ApiResponse<InlineResponse20015> resp = systemJobsLogsIdGroupIdGetWithHttpInfo(id, groupId, limit, offset, endOffset, et, lt, filter);
        return resp.getData();
    }

    /**
     * Get contents of the log file
     * Get contents of the log file
     * @param id Job id (required)
     * @param groupId Group ID (optional) (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param offset Offset in the current log file to fetch the log events from. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> systemJobsLogsIdGroupIdGetWithHttpInfo(String id, String groupId, Integer limit, Integer offset, Integer endOffset, Integer et, Integer lt, String filter) throws ApiException {
        com.squareup.okhttp.Call call = systemJobsLogsIdGroupIdGetValidateBeforeCall(id, groupId, limit, offset, endOffset, et, lt, filter, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contents of the log file (asynchronously)
     * Get contents of the log file
     * @param id Job id (required)
     * @param groupId Group ID (optional) (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param offset Offset in the current log file to fetch the log events from. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemJobsLogsIdGroupIdGetAsync(String id, String groupId, Integer limit, Integer offset, Integer endOffset, Integer et, Integer lt, String filter, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemJobsLogsIdGroupIdGetValidateBeforeCall(id, groupId, limit, offset, endOffset, et, lt, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemLogsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemLogsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/system/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemLogsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = systemLogsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of log files
     * Get a list of log files
     * @return InlineResponse20038
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20038 systemLogsGet() throws ApiException {
        ApiResponse<InlineResponse20038> resp = systemLogsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of log files
     * Get a list of log files
     * @return ApiResponse&lt;InlineResponse20038&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20038> systemLogsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systemLogsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of log files (asynchronously)
     * Get a list of log files
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemLogsGetAsync(final ApiCallback<InlineResponse20038> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemLogsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20038>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemLogsIdGet
     * @param id Log ID (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemLogsIdGetCall(String id, Integer limit, Integer endOffset, Integer et, Integer lt, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/system/logs/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (endOffset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endOffset", endOffset));
        if (et != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("et", et));
        if (lt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lt", lt));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemLogsIdGetValidateBeforeCall(String id, Integer limit, Integer endOffset, Integer et, Integer lt, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemLogsIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = systemLogsIdGetCall(id, limit, endOffset, et, lt, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get contents of the log file
     * Get contents of the log file
     * @param id Log ID (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 systemLogsIdGet(String id, Integer limit, Integer endOffset, Integer et, Integer lt, String filter) throws ApiException {
        ApiResponse<InlineResponse20015> resp = systemLogsIdGetWithHttpInfo(id, limit, endOffset, et, lt, filter);
        return resp.getData();
    }

    /**
     * Get contents of the log file
     * Get contents of the log file
     * @param id Log ID (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> systemLogsIdGetWithHttpInfo(String id, Integer limit, Integer endOffset, Integer et, Integer lt, String filter) throws ApiException {
        com.squareup.okhttp.Call call = systemLogsIdGetValidateBeforeCall(id, limit, endOffset, et, lt, filter, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contents of the log file (asynchronously)
     * Get contents of the log file
     * @param id Log ID (required)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param endOffset in the current log file to fetch the log events upto. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemLogsIdGetAsync(String id, Integer limit, Integer endOffset, Integer et, Integer lt, String filter, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemLogsIdGetValidateBeforeCall(id, limit, endOffset, et, lt, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemLogsSearchGet
     * @param type type of logs request single multi group (required)
     * @param groupId id of the group to query (optional)
     * @param files query string[] optional file or files to query (optional)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemLogsSearchGetCall(String type, String groupId, String files, Integer limit, Integer et, Integer lt, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/system/logs/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (files != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("files", files));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (et != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("et", et));
        if (lt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lt", lt));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemLogsSearchGetValidateBeforeCall(String type, String groupId, String files, Integer limit, Integer et, Integer lt, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling systemLogsSearchGet(Async)");
        }
        
        com.squareup.okhttp.Call call = systemLogsSearchGetCall(type, groupId, files, limit, et, lt, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get contents of the log file
     * Get contents of the log file
     * @param type type of logs request single multi group (required)
     * @param groupId id of the group to query (optional)
     * @param files query string[] optional file or files to query (optional)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @return InlineResponse20015
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20015 systemLogsSearchGet(String type, String groupId, String files, Integer limit, Integer et, Integer lt, String filter) throws ApiException {
        ApiResponse<InlineResponse20015> resp = systemLogsSearchGetWithHttpInfo(type, groupId, files, limit, et, lt, filter);
        return resp.getData();
    }

    /**
     * Get contents of the log file
     * Get contents of the log file
     * @param type type of logs request single multi group (required)
     * @param groupId id of the group to query (optional)
     * @param files query string[] optional file or files to query (optional)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @return ApiResponse&lt;InlineResponse20015&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20015> systemLogsSearchGetWithHttpInfo(String type, String groupId, String files, Integer limit, Integer et, Integer lt, String filter) throws ApiException {
        com.squareup.okhttp.Call call = systemLogsSearchGetValidateBeforeCall(type, groupId, files, limit, et, lt, filter, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contents of the log file (asynchronously)
     * Get contents of the log file
     * @param type type of logs request single multi group (required)
     * @param groupId id of the group to query (optional)
     * @param files query string[] optional file or files to query (optional)
     * @param limit Maximum number of log lines to retrieve starting from offset. (optional)
     * @param et Epoch timestamp of the earliest event (includes rolled files present on disk) (optional)
     * @param lt Epoch timestamp of the latest event (includes rolled files present on disk) (optional)
     * @param filter Filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemLogsSearchGetAsync(String type, String groupId, String files, Integer limit, Integer et, Integer lt, String filter, final ApiCallback<InlineResponse20015> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemLogsSearchGetValidateBeforeCall(type, groupId, files, limit, et, lt, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20015>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
